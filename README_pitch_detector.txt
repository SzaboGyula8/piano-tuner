Pitch Detector
==============

This is a real-time audio pitch detector written in Python.
It captures microphone input, analyzes pitch using autocorrelation,
and compares the detected frequency to a user-defined tuning table.

Requirements
------------
- Python 3.x
- NumPy
- SciPy
- sounddevice

Install requirements with:
    pip install numpy scipy sounddevice

Usage
-----
1. Make sure the frequency table file `output_freqs.txt` exists
   in the same folder. This file is typically generated by a
   separate script based on tuning and stretch tables.

2. Run the detector:
    python pitch_detector_en.py
 
    Or specify a custom tuning file:
    python pitch_detector_en.py my_tuning_table.txt


3. The program will begin capturing audio from the default input
   device (e.g., microphone). Each frame is analyzed for pitch.

4. Output will show the closest note name, expected frequency,
   detected frequency, and the deviation in cents.

Example output:
    A3 (220.00 Hz) | detected: 219.58 Hz | deviation: -3.3 cent

Controls
--------
- Press Ctrl+C in the terminal to stop the program.

Input File
----------
`output_freqs.txt` must contain tab-separated values in this format:

    NOTE    FREQUENCY_IN_HZ

Example:
    C3      130.812783
    C#3     138.591315
    D3      146.832384

Each line should correspond to a MIDI note from G-1 (7) to C8 (108).

Configuration
-------------
You can adjust parameters at the top of the script:
- `SAMPLE_RATE`         (default: 11025 Hz)
- `FRAME_DURATION`      (default: 0.75 sec)
- `THRESHOLD_DB`        (minimum volume threshold)
- `ZERO_PAD_FACTOR`     (affects pitch resolution)

Note
----
Accuracy depends on:
- Microphone quality
- Background noise
- Clarity of the played note
- Proper stretch/temperament table generation

To export this script as a standalone executable:
    pip install pyinstaller
    pyinstaller --onefile pitch_detector_en.py

License
-------
MIT License (or public domain if desired)
